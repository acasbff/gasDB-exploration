[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "index.html#overview-of-the-data",
    "href": "index.html#overview-of-the-data",
    "title": "Exploration of gas power plant data",
    "section": "Overview of the data",
    "text": "Overview of the data\n\n\nCode\ncountryMatch0 &lt;- read_delim('/Users/acas/Dropbox/BFF/projects/BFFcountries.txt', show_col_types = FALSE) %&gt;% \n  rename(country = Iso2)\ncountryMatch &lt;- select(countryMatch0, country, Country) \n\n### get query tables from Gas database\ngasdb &lt;- dbConnect(RSQLite::SQLite(), \"/Users/acas/Library/CloudStorage/Box-Box/Internal database folder/4 - Fossil gas DB/1 - Manual and Gas DB/1 - Gas DB/GasDB\")\n## dbListTables(gasdb)\nallData &lt;- dbReadTable(gasdb, \"BASE2_units_last_timestamp\") %&gt;%  \n  left_join(countryMatch) %&gt;%  # could consider add country from the database\n  mutate(start_year = ifelse(start_year == 1800, NA, start_year)) ### make 1800 years into missing data...?\n  \nOwnerDt0 &lt;- dbReadTable(gasdb, \"BASE4_capacity_per_unit_per_parent\") \n\n# statusPlant1 &lt;- dbReadTable(gasdb, \"BASE7_status_and_capacity_per_plant\") %&gt;%       ### slower than R\n#   mutate(capacity_MW_installed = ifelse((capacity_MW_operating + capacity_MW_mothballed) == 0, NA, capacity_MW_operating + capacity_MW_mothballed),\n#          capacity_MW_planned = ifelse((capacity_MW_announced + capacity_MW_preconstruction) == 0, NA, capacity_MW_announced + capacity_MW_preconstruction))\n\n\n# download.file('https://ember-climate.org/app/uploads/2022/07/yearly_full_release_long_format.csv', paste0('yearly_full_release_long_format_',\n#                      str_remove_all(Sys.Date(), \"-\"), \".csv\"), mode = \"wb\")\n\nember0 &lt;- read_csv('../yearly_full_release_long_format_20240830.csv', show_col_types = FALSE) %&gt;% \n  left_join(select(countryMatch0, `Country code` = Iso3, Country)) %&gt;% \n  drop_na(Country)\n\ngemFuelData &lt;- suppressWarnings(read_excel('/Users/acas/Dropbox/BFF/projects/GasRelated/dataChecks/DB_comparisons/GOGPT_dl2024-03-29_filteredCountryFossilGas.xlsx')) %&gt;% \n  select(`Unit ID`, Fuel) %&gt;% \n  mutate(Fuel_type = ifelse(str_detect(Fuel, fixed(\", \")), \"multiple\",\"NG\")) %&gt;% \n  rename(gem_unit_id = `Unit ID`)\n\ncleanData &lt;- tibble(allData) %&gt;% \n  unite(\"owners\", c(owner_1, owner_2, owner_3), remove = TRUE, na.rm = TRUE, sep = \"|\") %&gt;% \n  mutate(plant_name = str_remove_all(plant_name_eng, \" power station\")) %&gt;% \n  select(Country, plant_name,unit_name,start_year,capacity_mw,status,owners) \n\ncleanData %&gt;% \n  datatable(\n    filter = \"top\",  \n    rownames = FALSE, \n    extensions = 'Scroller', \n    options = list(\n      autoWidth = TRUE,\n      deferRender = TRUE,\n      scrollY = 300,\n      scrollX = TRUE,    # Enable horizontal scrolling\n      scroller = TRUE, \n      orderMulti = TRUE,  # Enable multiple column sorting\n      initComplete = JS(\n        \"function(settings, json) {\",\n        \"$('.dataTables_wrapper').css('font-size', '12px');\",  # Adjust font size here\n        \"}\"\n      )\n    ),\n    caption = htmltools::tags$caption(\n      style = 'caption-side: bottom; text-align: left; font-size: 12px; color: #777; font-style: italic;',\n      'Note: Hold Shift to sort by multiple columns'\n    )\n  )\n\n\n\n\n\n\n\n\nCode\n### making BASE7_status_and_capacity_per_plant table from (faster to load)\ncapacity_per_status &lt;- allData %&gt;%\n  group_by(bff_plant_id, year) %&gt;%\n  summarise(\n    capacity_MW_operating = round(sum(ifelse(status == 'operating', capacity_mw, 0)), 1),\n    capacity_MW_announced = round(sum(ifelse(status == 'announced', capacity_mw, 0)), 1),\n    capacity_MW_preconstruction = round(sum(ifelse(status == 'pre-construction', capacity_mw, 0)), 1),\n    capacity_MW_construction = round(sum(ifelse(status == 'construction', capacity_mw, 0)), 1),\n    capacity_MW_retired = round(sum(ifelse(status == 'retired', capacity_mw, 0)), 1),\n    capacity_MW_mothballed = round(sum(ifelse(status == 'mothballed', capacity_mw, 0)), 1),\n    capacity_MW_shelved = round(sum(ifelse(status == 'shelved', capacity_mw, 0)), 1),\n    capacity_MW_cancelled = round(sum(ifelse(status == 'cancelled', capacity_mw, 0)), 1)\n  ) %&gt;%\n  ungroup()\n\nplant_status &lt;- allData %&gt;%\n  group_by(bff_plant_id) %&gt;%\n  summarise(\n    Status_plant = case_when(\n      any(status %in% c('operating', 'mothballed')) ~ 'Installed',\n      any(status == 'construction') ~ 'Construction',\n      any(status %in% c('announced', 'pre-construction')) ~ 'Planned',\n      any(status == 'shelved') ~ 'Shelved',\n      any(status == 'cancelled') ~ 'Cancelled',\n      all(status == 'retired') ~ 'Retired',\n      TRUE ~ 'Unknown'\n    )\n  ) %&gt;%\n  ungroup()\n\nstatus_and_date &lt;- plant_status %&gt;%\n  left_join(allData, by = \"bff_plant_id\") %&gt;%\n  group_by(bff_plant_id) %&gt;%\n  summarise(\n    Status_plant = first(Status_plant),\n    retired_year = ifelse(Status_plant == 'Retired', \n                          as.character(max(ifelse(status == 'retired', retirement_year, NA), na.rm = TRUE)), \n                          \"[Not relevant]\"),\n    planned_retire_last_unit = case_when(\n      Status_plant %in% c('Retired', 'Cancelled') ~ NA_character_,\n      Status_plant %in% c('Installed', 'Construction', 'Planned', 'Shelved') & \n        any(is.na(planned_retirement_year) & !status %in% c('retired', 'cancelled')) ~ 'Not planned',\n      TRUE ~ as.character(ifelse(all(is.na(planned_retirement_year)), NA, max(planned_retirement_year, na.rm = TRUE)))\n    ),\n    start_year_first_unit = case_when(\n      Status_plant == 'Cancelled' ~ NA_character_,\n      any(start_year == 1800 | is.na(start_year)) ~ 'Unknown',\n      TRUE ~ as.character(ifelse(all(is.na(start_year)), NA, min(start_year[start_year &gt; 1800], na.rm = TRUE)))\n    ),\n    start_year_last_unit = case_when(\n      Status_plant == 'Cancelled' ~ NA_character_,\n      any(is.na(start_year)) | !any(start_year &gt; 1800) ~ 'Unknown',\n      TRUE ~ as.character(ifelse(all(is.na(start_year)), NA, max(start_year[start_year &gt; 1800], na.rm = TRUE)))\n    ),\n    CHP = case_when(\n      any(!is.na(chp)) ~ ifelse(max(chp, na.rm = TRUE) == 1, 'Yes', 'No'),\n      TRUE ~ 'Unknown'\n    )\n  ) %&gt;%\n  ungroup()\n\nstatusPlant &lt;- allData %&gt;%\n  left_join(capacity_per_status, by = c(\"bff_plant_id\", \"year\")) %&gt;%\n  left_join(status_and_date, by = \"bff_plant_id\") %&gt;%\n  group_by(bff_plant_id) %&gt;%\n  reframe(\n    Country = first(Country),\n    Name_English_short = gsub(\" power station| power plant\", \"\", first(plant_name_eng)),\n    Status_plant = first(Status_plant),\n    start_year_first_unit = first(start_year_first_unit),\n    capacity_MW_installed = ifelse((capacity_MW_operating + capacity_MW_mothballed) == 0, NA, capacity_MW_operating + capacity_MW_mothballed),\n    capacity_MW_planned = ifelse((capacity_MW_announced + capacity_MW_preconstruction) == 0, NA, capacity_MW_announced + capacity_MW_preconstruction),\n    capacity_MW_construction = ifelse(capacity_MW_construction == 0, NA, capacity_MW_construction),\n    capacity_MW_shelved = ifelse(capacity_MW_shelved == 0, NA, capacity_MW_shelved),\n    capacity_MW_cancelled = ifelse(capacity_MW_cancelled == 0, NA, capacity_MW_cancelled),\n    capacity_MW_retired = ifelse(capacity_MW_retired == 0, NA, capacity_MW_retired)\n  ) %&gt;%\n  ungroup() %&gt;%\n  arrange(Country, Name_English_short) %&gt;% \n  distinct()\n\n\n\nVerify how many power plant units have multiple fuel or are peaker\n\n\nCode\nissues &lt;- select(allData, bff_unit_id , gem_unit_id, status, technology, fuel_main, fuel_secondary) %&gt;% \n  mutate(Fuel_type_BFF = ifelse(is.na(fuel_secondary), \"NG\", \"multiple\")) %&gt;% \n  inner_join(gemFuelData) %&gt;% \n  rename( Fuel_GEM = Fuel, Fuel_type_GEM = Fuel_type) %&gt;% \n  filter(Fuel_type_BFF != Fuel_type_GEM)\n## 232 units differ in single vs multiple with GEM so should be checked with most recent GEM update\n## write.xlsx(issues, 'fuelIssues_GEM_BFF.xlsx', colWidths = \"auto\")\n\nfuelUnits &lt;- allData %&gt;% \n  select(bff_plant_id, capacity_mw, type, fuel_main, fuel_secondary) %&gt;% \n  mutate(type = ifelse(is.na(type), \"baseload\", str_to_lower(type)),\n         Fuel_type = ifelse(is.na(fuel_secondary), \"NG\", \"multiple\"))\n\nf0c &lt;- ggplot(fuelUnits, aes(x = type, y = capacity_mw)) +\n  geom_bar(stat = \"summary\", fun = sum, show.legend = FALSE) +\n  stat_summary(aes(label = round(stat(y),0)), fun.y = 'sum', geom = 'text', vjust = -0.1, size = 3) +\n  theme_bw() +\n  scale_y_continuous(labels = label_number()) +\n  labs(x = \"\",\n       y = \"Total capacity of power plant units\",\n       caption = \"All except peaker are baseload\")\n\nf1c &lt;- ggplot(fuelUnits, aes(x = Fuel_type, y = capacity_mw, fill = Fuel_type)) +\n  geom_bar(stat = \"summary\", fun = sum, position = 'dodge', show.legend = FALSE ) +\n    stat_summary(aes(label = round(stat(y),0)), fun.y = 'sum', geom = 'text', vjust = 1.5, size = 3) +\n  facet_wrap(~type, scale = \"free\") +\n  theme_bw() +\n  scale_y_continuous(labels = label_number()) +\n  labs(y = \"Total capacity of power plant units\", x = \"Fuel type\")\n\nf0cf1c &lt;- (f0c + f1c) +\n  patchwork::plot_layout(widths = c(0.5, 2), guides = 'collect') +\n  patchwork::plot_annotation(\n    title = 'Comparison with capacity')\nf0cf1c\n\n\n\n\n\n\n\n\n\nCode\nf0N &lt;- ggplot(fuelUnits, aes(x = type)) +\n  geom_bar(show.legend = FALSE ) +\n    geom_text(stat='count', aes(label=..count..), vjust=-0.1, size = 3) + \n  theme_bw() +\n  scale_y_continuous(labels = label_number()) +\n  labs(x = \"\",\n       y = \"Count of power plant units\", caption = 'All except peaker are baseload')\n\nf1N &lt;- ggplot(fuelUnits, aes(x = Fuel_type, fill = Fuel_type)) +\n  geom_bar(position = 'dodge', show.legend = FALSE ) +\n    geom_text(stat='count', aes(label=..count..), vjust=1.5, size = 3) + \n  facet_wrap(~type, scale = \"free\") +\n  theme_bw() +\n  scale_y_continuous(labels = label_number()) +\n  labs(y = \"Count of power plant units\", x = \"Fuel type\")\n\nf0Nf1N &lt;- (f0N + f1N) +\n  plot_layout(widths = c(0.5, 2), guides = 'collect') +\n  plot_annotation(\n    title = \"Comparison with number of power plant units\")\nf0Nf1N\n\n\n\n\n\n\n\n\n\n\n\n\nVerify how many units have multiple owners\n\n\nCode\n# df &lt;- allData %&gt;% \n#   select(bff_unit_id, capacity_mw, owner_1:owner_3_share) \n# \n# # Pre-allocate the list to store the data\n# rows &lt;- list()\n# \n# # Loop through each row of the dataframe\n# for (i in 1:nrow(df)) {\n#   # Extract the current row's data\n#   current_row &lt;- df[i, ]\n#   capacity_mw &lt;- current_row$capacity_mw\n#   \n#   # Determine the number of owners with non-NA shares\n#   non_na_shares &lt;- sum(!is.na(current_row[grepl(\"_share$\", names(current_row))]))\n#   N_ownerUnit &lt;- ifelse(non_na_shares &gt; 0, non_na_shares, 3) # Assume 3 if all shares are NA\n#   \n#   # Loop through each owner\n#   for (j in 1:3) {\n#     owner &lt;- current_row[[paste0(\"owner_\", j)]]\n#     # Skip the loop iteration if owner is NA\n#     if (is.na(owner)) next\n#     \n#     owner_share &lt;- current_row[[paste0(\"owner_\", j, \"_share\")]]\n#     capacity_adjusted &lt;- ifelse(is.na(owner_share), capacity_mw / N_ownerUnit, capacity_mw * owner_share)\n#     \n#     # Append the data to the list\n#     rows &lt;- c(rows, list(data.frame(\n#       bff_unit_id = current_row$bff_unit_id,\n#       N_ownerUnit = N_ownerUnit,\n#       owner = owner,\n#       capacity_mw = capacity_mw,\n#       owner_share = owner_share,\n#       capacity_adjusted = capacity_adjusted\n#     )))\n#   }\n# }\n# \n# # Combine the list of data frames into one data frame\n# OwnerDt &lt;- do.call(rbind, rows)\n# \n# # Convert the capacity_adjusted to numeric in case it is not already\n# OwnerDt$capacity_adjusted &lt;- as.numeric(OwnerDt$capacity_adjusted)\n\nOwnerDt &lt;- select(OwnerDt0, bff_plant_id, bff_unit_id, \n                   owner, parent, capacity_mw, share) %&gt;%\n  rename(capacity_adjusted = capacity_mw, owner_share = share) %&gt;% \n  group_by(bff_unit_id) %&gt;%\n  mutate(N_ownerUnit = n_distinct(owner),\n         capacity_mw = sum(capacity_adjusted, na.rm = TRUE)) %&gt;%\n  ungroup() \n\nmutOwner &lt;- OwnerDt %&gt;% \n  mutate(ownerType = case_when(owner %in% 'not found' ~ 'not found',\n                               TRUE~paste(N_ownerUnit,\"owner\"))) %&gt;% \n  select(bff_unit_id, ownerType, capacity_mw, capacity_adjusted) %&gt;% \n  distinct()\n\nf2.1 &lt;- ggplot(mutOwner, aes(x = ownerType)) +\n  geom_bar() +\n    geom_text(stat='count', aes(label=..count..), vjust=-0.5) +\n  theme_bw() +\n  labs(x = \"Type of owner\", y = \"Counts of units\")\nf2.1\n\n\n\n\n\n\n\n\n\n\n\nVerify how many power plants have units with different status\n\n\nCode\nunitsStatus &lt;- allData %&gt;% \n  select(bff_plant_id, bff_unit_id, status) %&gt;% \n  left_join(select(statusPlant, bff_plant_id, Status_plant)) %&gt;% \n  group_by(bff_plant_id) %&gt;% \n  mutate(`How many units per power plant` = n_distinct(bff_unit_id),\n         `How many different unit status per power plant` = n_distinct(status)) %&gt;% \n  ungroup()\n\nissuesStatus &lt;- unitsStatus %&gt;% \n  group_by(`How many units per power plant`) %&gt;% \n  tally() %&gt;% \n  filter(`How many units per power plant` != 1) %&gt;% \n  pull(n) %&gt;% \n  sum(.)\n\nf3.1 &lt;- ggplot(unitsStatus , aes(x = fct_infreq(status))) +\n  geom_bar() +\n  geom_text(stat='count', aes(label=..count..), vjust=-0.5) +\n  theme_bw() +\n  labs(y = \"Count of units\", x = \"status\")\nf3.1\n\n\n\n\n\n\n\n\n\nCode\nf3.2 &lt;- unitsStatus %&gt;% \n  pivot_longer(col = c('How many units per power plant', \n                       'How many different unit status per power plant')) %&gt;% \n  ggplot(aes(x = (as.factor(value)))) +\n  geom_bar() +\n  geom_text(stat='count', aes(label=..count..), vjust=-0.5) +\n  facet_wrap(~fct_rev(name), scale = \"free\") +\n  labs(x = NULL, y = \"Counts\")\nf3.2\n\n\n\n\n\n\n\n\n\n1297 power plants have units with different status.\n\n\nCode\nStatusVerification &lt;- unitsStatus %&gt;%\n  group_by(bff_plant_id) %&gt;%\n  mutate(statusAll = str_c(sort(unique(status)), collapse = \"|\")) %&gt;% \n  ungroup() %&gt;% \n   filter(`How many different unit status per power plant` &gt; 1) %&gt;% \n  select(bff_plant_id, Status_plant, statusAll) %&gt;% \n  distinct() %&gt;% \n  mutate(highlight = ifelse(str_detect(statusAll, \"operating\"), \"has_Operating\", \"Other\"))\n\nggplot(StatusVerification, aes(y = fct_infreq(statusAll))) +\n  geom_bar(aes(fill = highlight),show.legend = FALSE) +\n  geom_text(stat='count', aes(label=..count..), hjust=-0.1) +\n  theme_bw() +\n  scale_fill_manual(values = c(\"has_Operating\" = \"grey\", \"Other\" = \"purple\")) +\n  labs(y = \"\" , x = \"Counts of power plants\", \n       title = 'All power plants with more than 1 unit status have \"Installed\" has power plant status',\n       subtitle = 'Highlighted purple the status combination without any operating unit')\n\n\n\n\n\n\n\n\n\nNot sure if the power plants where there are no operating unit should have a “Installed” power plant status."
  },
  {
    "objectID": "index.html#overall-capacity-per-status",
    "href": "index.html#overall-capacity-per-status",
    "title": "Exploration of gas power plant data",
    "section": "Overall capacity per status",
    "text": "Overall capacity per status\n\nOverall (unit and power plant status)\n\n\nCode\ncolStatus3 &lt;- colStatus\nnames(colStatus3) &lt;- c(\"operating+mothballed\", 'pre-construction+announced', 'construction', 'shelved', 'cancelled', 'retired')\ncap &lt;- select(allData, bff_plant_id, bff_unit_id, Country, capacity_mw, status) %&gt;% \n  left_join(select(statusPlant, bff_plant_id, Status_plant)) %&gt;% \n  mutate(Status_plant = factor(Status_plant, levels = names(colStatus)),\n         status3 = case_when(status %in% c('operating','mothballed') ~ \"operating+mothballed\",\n                             status %in% c('pre-construction','announced') ~ 'pre-construction+announced',\n                                           TRUE ~ status),\n         status3 = factor(status3, levels = names(colStatus3)))\n\nggplot(cap, aes(x = fct_infreq(Status_plant), y = capacity_mw, fill = fct_infreq(status))) +\n  geom_bar(stat = \"summary\", fun = sum, position = position_dodge(width = 0.9)) +\n  geom_text(stat = \"summary\", aes(label = round(..y.., 0)), \n            fun = sum, position = position_dodge(width = 0.9), \n            vjust = -0.1, size = 3) +\n  labs(x=\"Per power plant status\", y = \"Per unit capacity\",\n       fill = 'Per unit status') +\n  scale_fill_manual(values = colStatus2) +\n  theme_bw() \n\n\n\n\n\n\n\n\n\n\n\nPer country (unit status)\n\n\nCode\nggplot(cap, aes(x = fct_infreq(status3), \n                y = capacity_mw, fill = status3)) +\n  geom_bar(stat = \"summary\", fun = sum) +\n  geom_text(stat = \"summary\", aes(label = round(..y.., 0)),\n            fun = sum,\n            vjust = -0.15, size = 2) +\n  lemon::facet_rep_wrap(~Country, ncol = 4, scales = \"free_y\", repeat.tick.labels = 'all') +\n  labs(x=NULL, fill = NULL, y = \"Capacity\") +\n  scale_fill_manual(values = colStatus3) +\n  scale_y_continuous(expand = expansion(mult = c(0, .1))) +\n  theme_classic() +\n  theme(\n    legend.position = 'bottom',\n    strip.background = element_rect(fill = \"white\", colour = NA),  \n    axis.text.x = element_blank(),\n    axis.ticks = element_blank(), \n    axis.line = element_blank(),\n    axis.text.y = element_text(vjust = 0),\n    panel.grid.major.y = element_line(),\n    panel.grid.major.x = element_blank(),  # Remove major gridlines\n    panel.grid.minor = element_blank(),  # Remove minor gridlines\n    axis.title.y = element_text(vjust = 1, hjust = 1),  # Move y axis label to the top\n  ) \n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncap2 &lt;- cap %&gt;%\n  group_by(Country) %&gt;%\n  mutate(total_capacity = sum(capacity_mw, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(Country = fct_reorder(Country, total_capacity)) \n\nranked_countries_by_status &lt;- cap2 %&gt;%\n  filter(status3 %in% names(colStatus3)[1:3]) %&gt;% \n  group_by(status3, Country) %&gt;%\n  summarize(total_capacity = sum(capacity_mw, na.rm = TRUE)) %&gt;%\n  mutate(Rank = rank(-total_capacity, ties.method = \"min\")\n         ) %&gt;%\n  arrange(status3, total_capacity) %&gt;% \n  ungroup() %&gt;% \n  mutate(Top5other = case_when(Rank &gt; 5 ~ 'Other',\n                               TRUE ~ as.character(Rank)),\n         Country2 = case_when(Rank &gt; 5 ~ 'Other',\n                             TRUE ~ Country)) \n\nNcountriesOther &lt;- ranked_countries_by_status %&gt;%\n  filter(Country2 %in% 'Other') %&gt;% \n  group_by(status3) %&gt;% \n  tally()\n\ncaptop5other &lt;- ranked_countries_by_status %&gt;% \n  group_by(status3, Top5other) %&gt;% \n  summarize(total_CapacityOther = sum(total_capacity, na.rm = TRUE)) %&gt;% \n  left_join(select(ranked_countries_by_status, -total_capacity, -Rank, -Country)) %&gt;% \n  left_join(NcountriesOther) %&gt;% \n  distinct() %&gt;% \n  mutate(Top5other2 = ifelse(Country2 %in% 'Other', paste0(Country2, \" (\",n,\")\"),'Top 5 countries'))\n\ncc &lt;- unique(captop5other$Country2)[!unique(captop5other$Country2) %in% \"Other\"]\ncolsCountries &lt;- c(iwanthue(length(cc)),'grey60')\nnames(colsCountries) &lt;- c(cc, \"Other\")\n\nbbb &lt;- captop5other %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(x = fct_inorder(Top5other2), y = total_CapacityOther, \n             fill = factor(Country2, levels = unique(Country2)))) +\n  geom_bar(stat = 'identity', position = \"stack\",\n           width = 0.98, \n           show.legend = FALSE) +\n  geom_text(aes(label = Country2), position = position_stack(vjust = 0.5),\n             size.unit = 'pt', size = 9.5, fontface = 'bold') +\n    facet_wrap(~ status3, ncol = 3, scales = \"free_x\") + \n  labs(y = \"Total Capacity\", x = NULL) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.01)),\n                     breaks = c(10000, 20000, 50000, 100000, 150000)) +\n    scale_fill_manual(values = colsCountries) +\n  theme_bw() +\n  theme(strip.background = element_blank(),\n        legend.position = 'bottom',\n        axis.text.y = element_text(face = 'bold'),\n        strip.text = element_text(face = 'bold', size = 12),\n        axis.ticks.y = element_blank(), \n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()\n  ) \nbbb\n\n\n\n\n\n\n\n\n\n\n\nCode\nf3b &lt;- captop5other %&gt;% \n  ggplot(aes(y = fct_rev(Top5other), x = total_CapacityOther)) +\n  geom_bar(aes(color = word(Country2, sep = fixed(\"-\"),-1)),\n           fill = NA,\n           linewidth = 1.5,\n           show.legend = FALSE,\n           width = 0.7,\n           stat = 'identity') +\n  geom_text(aes(label = round(total_CapacityOther, 0)),\n            hjust = 1.2, size.unit = 'pt', size = 8) +\n  geom_text(stat = \"identity\", aes(label = Country2),\n            hjust = -0.2, size.unit = 'pt', size = 8, fontface = 'bold') +\n  lemon::facet_rep_wrap(~fct_inorder(status3), ncol = 3, scales = \"free_x\", \n                        repeat.tick.labels = 'x', drop = TRUE) +\n  labs(y = \"Rank\", x = 'Total capacity') +\n  scale_color_manual(values = colsCountries) +\n  scale_x_continuous(expand = expansion(mult = c(0, .12))) +\n  theme_classic() +\n  theme(strip.background = element_blank(),\n        legend.position = 'bottom',\n        axis.text.y = element_text(face = 'bold'),\n        strip.text = element_text(face = 'bold', size = 12),\n        axis.ticks.y = element_blank(), \n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()\n  ) \nf3b"
  },
  {
    "objectID": "index.html#capacity-for-top-10-utilities",
    "href": "index.html#capacity-for-top-10-utilities",
    "title": "Exploration of gas power plant data",
    "section": "Capacity for top 10 utilities",
    "text": "Capacity for top 10 utilities\n\n\nCode\ncap_utilities &lt;- #allData %&gt;% \n  # mutate(plant_name = str_remove_all(plant_name_eng, \" power station\")) %&gt;% \n  # select(bff_unit_id, bff_plant_id, Country, plant_name, unit_name, start_year, status) %&gt;% \n  # full_join(OwnerDt) %&gt;% \n  # group_by(bff_plant_id, owner, status) %&gt;% \n  # mutate(Cap_adjPlantStatus = sum(capacity_adjusted)) %&gt;% \n  # ungroup() %&gt;% \n  # left_join(ParentDt, relationship = \"many-to-many\")\n\n  left_join(OwnerDt,\n            select(allData , bff_unit_id, Country, plant_name_eng, start_year, status)) %&gt;% \n  mutate(plant_name = str_remove_all(plant_name_eng, \" power station\"),\n         status3 = case_when(status %in% c('operating','mothballed') ~ \"operating+mothballed\",\n                             status %in% c('pre-construction','announced') ~ 'pre-construction+announced',\n                             TRUE ~ status),\n         status3 = factor(status3, levels = names(colStatus3)))\n\n\n\nAcross Europe per status\n\n\nCode\n### first get total capacity per parent company given each status3 and Rank them within each Status3\ncapParent_status1 &lt;- cap_utilities  %&gt;%\n  mutate(missingParent = if_else(parent == \"not found\", 1, 0)) %&gt;% ### to handle when parent is missing\n  group_by(parent, status3, missingParent) %&gt;%\n  summarize(ParentStatus3_CapPlant = sum(capacity_adjusted, na.rm = T)) %&gt;%\n  arrange(missingParent, desc(ParentStatus3_CapPlant)) %&gt;%\n  ungroup() %&gt;% \n  group_by(status3) %&gt;% \n  mutate(Rank = row_number(),\n         Rank = if_else(Rank &lt;= 10, as.character(Rank), \"Other\"),\n         RankP = if_else(Rank %in% 'Other', 'Other', paste0(Rank,'-',parent)),\n         Top10other = if_else(Rank %in% 'Other', 'Other', 'Top 10'))  \n\nplot_for_status3 &lt;- function(status_value) {\n  capParent_status1 %&gt;%\n    filter(status3 %in% status_value) %&gt;%\n    mutate(Top10ParentOther = ifelse(Top10other %in% 'Other', 'Other', parent)) %&gt;%\n    group_by(Top10ParentOther) %&gt;%\n    mutate(capTop10other = sum(ParentStatus3_CapPlant)) %&gt;%\n    ungroup() %&gt;%\n    select(Top10ParentOther, capTop10other, Rank, RankP, Top10other) %&gt;%\n    distinct() %&gt;%\n    arrange(as.numeric(Rank)) %&gt;%\n    mutate(RankP = factor(RankP, levels = unique(RankP[order(as.numeric(Rank))]))) %&gt;%\n    ggplot(\n      aes(y = capTop10other, \n          x = fct_rev(Top10other),\n          fill = RankP)) +\n    geom_col() +\n    geom_text(size.unit = 'pt', size = 7,\n      position = position_stack(vjust = 0.5), aes(label = round(..y.., 0))) +\n    coord_cartesian() +\n    labs(x = NULL, \n         y = 'Total capacity', \n         title = paste('Ranking of top 10 parent companies for', status_value)) +\n    scale_fill_manual(values = colorspace::lighten(c(RColorBrewer::brewer.pal(10, \"Spectral\"),\n                                                     'gray90'), 0.2),\n                      name = 'Ranking') +\n    theme_bw() +\n    theme(text = element_text(size = 10))\n}\n\nplotsRankUti &lt;- map(unique(capParent_status1$status3), plot_for_status3)\nplotsRankUti[[2]] /\nplotsRankUti[[5]] /\nplotsRankUti[[1]] /\nplotsRankUti[[3]] /\nplotsRankUti[[4]] /\nplotsRankUti[[6]] \n\n\n\n\n\n\n\n\n\n\n\n\nPer Country\n\n\nCode\n# Function to create the plot for a given status3\nCountryRanking_perStatusPlot &lt;- function(status_value) {\n  utilitiesOpenCountry &lt;- cap_utilities %&gt;% \n    filter(status3 %in% status_value, !owner %in% 'not found') %&gt;%\n    group_by(Country, parent) %&gt;%\n    summarize(NpowerPlants = n(),\n              ParentCountry_CapPlant = sum(capacity_adjusted, na.rm = TRUE), .groups = 'drop') %&gt;%\n    arrange(Country, desc(ParentCountry_CapPlant)) %&gt;%\n    ungroup() %&gt;% \n    group_by(Country) %&gt;%\n    mutate(Rank = row_number()) %&gt;% \n    ungroup() \n  \n  top10Europe &lt;- utilitiesOpenCountry %&gt;% \n    group_by(parent) %&gt;%\n    summarize(ParentCapacity = sum(ParentCountry_CapPlant)) %&gt;% \n    arrange(desc(ParentCapacity)) %&gt;% \n    mutate(EURank = row_number()) %&gt;%\n    filter(EURank &lt;= 10) %&gt;%  # Ensure only top 10 are taken\n    mutate(parent_EURank = paste0(EURank, \" - \", parent)) \n  \n  utilitiesOpenCountryEUTop &lt;- utilitiesOpenCountry %&gt;%\n    left_join(top10Europe, by = 'parent') %&gt;% \n    replace_na(list(parent_EURank = \"Other\")) %&gt;% \n    mutate(parent_EURank = factor(parent_EURank, \n                                  levels = c(unique(top10Europe$parent_EURank), \"Other\")))\n  \n  # Generate the plot\n  utilitiesOpenCountryEUTop %&gt;%  \n    filter(Rank &lt;= 10) %&gt;% \n    ggplot(aes(x = fct_inorder(as.character(Rank)), \n               y = ParentCountry_CapPlant,\n               fill = parent_EURank)) + \n    geom_col(color = \"gray20\", linewidth = 0.1) +  # Outline color for bars\n    geom_text(aes(label = NpowerPlants), position = position_stack(vjust = 0.5), size = 2, color = \"grey10\") + \n    scale_fill_manual(values = alpha(c(RColorBrewer::brewer.pal(10, \"Spectral\"), 'gray90'), 0.7)) +\n    facet_wrap(~Country, ncol = 3, scale = \"free_y\") + \n    theme_bw(base_family = \"sans\") +\n    theme(\n      strip.background = element_rect(fill = \"white\", colour = NA),  \n      axis.ticks = element_blank(),\n      axis.text.y = element_text(vjust = 0),\n      panel.grid.major = element_blank(),  # Remove major gridlines\n      panel.grid.minor = element_blank(),  # Remove minor gridlines\n      panel.border = element_rect(color = \"gray20\", fill = NA, linewidth = 0.5),\n      axis.title.y = element_text(vjust = 1, hjust = 1)  # Move y axis label to the top\n    ) +\n    labs(y = 'Total Capacity (MW)', x = 'Ranking per country', \n         fill = \"Top 10 ranking across Europe:\", \n         title = paste(\"Ranking of top 10 parent companies per country with\", status_value, \"status\"),\n         subtitle = \"Number of power plants per parent company is shown inside the bars\") +\n    scale_y_continuous(expand = expansion(mult = c(0, .05)))\n}\n\n\n# Apply the function to each unique status3 and store the plots in a list\nplots &lt;- map(unique(cap_utilities$status3), CountryRanking_perStatusPlot)\n\n\n\nPre-construction + announced\n\n\n\n\n\n\n\n\n\n\n\nConstruction\n\n\n\n\n\n\n\n\n\n\n\nOperating + mothballed\n\n\n\n\n\n\n\n\n\n\n\nShelved\n\n\n\n\n\n\n\n\n\n\n\nCancelled\n\n\n\n\n\n\n\n\n\n\n\nRetired"
  },
  {
    "objectID": "index.html#projected-new-capacity-vs-all-fuels-from-ember",
    "href": "index.html#projected-new-capacity-vs-all-fuels-from-ember",
    "title": "Exploration of gas power plant data",
    "section": "Projected new capacity vs all fuels (from Ember)",
    "text": "Projected new capacity vs all fuels (from Ember)\nAll BFF countries with any planned or in construction capacity\n\n\nCode\nPlannedCountries &lt;- filter(statusPlant, !is.na(capacity_MW_planned) | !is.na(capacity_MW_construction)) %&gt;% \n  select(Country, capacity_MW_planned, capacity_MW_construction) %&gt;%\n  pull(Country) %&gt;% \n  unique()\n\nstatusPlant2 &lt;- statusPlant %&gt;% \n    filter(Country %in% PlannedCountries) %&gt;% \n  mutate(capacity_new = rowSums(select(., capacity_MW_construction, capacity_MW_planned, capacity_MW_shelved), na.rm = TRUE)) %&gt;% \n  group_by(Country) %&gt;% \n  summarize(capacity = sum(capacity_new, na.rm = TRUE), Aggregate = \"New projected fossil gas capacity\" ) \n\nember &lt;- ember0 %&gt;% \n  filter(Country %in% PlannedCountries, \n         Year %in% 2022, \n         Category %in% 'Capacity', \n         Subcategory %in% 'Fuel') %&gt;% \n  mutate(Aggregate = case_when(Variable %in% c('Coal',\"Other Fossil\") ~ \"Coal & other fossil\",\n                               Variable %in% \"Gas\" ~ \"Fossil gas\",\n                               Variable %in% c(\"Solar\",\"Wind\") ~ \"Solar & wind\",\n                               TRUE~\"Other fuels\")) %&gt;% \n  group_by(Country, Aggregate) %&gt;% \n  summarize(capacity = sum(Value, na.rm = TRUE)*1000) %&gt;% \n  ungroup() %&gt;%\n    bind_rows(statusPlant2) %&gt;% \n  group_by(Country) %&gt;%\n  mutate(total_capacity = sum(capacity),\n         percent_capacity = (capacity / total_capacity) * 100) %&gt;%\n  ungroup() %&gt;%\n   arrange(desc(Country),match(Aggregate, c(\"New projected fossil gas capacity\",\"Fossil gas\", \"Coal & other fossil\", \"Other fuels\", \"Solar & wind\" )))\n\nggplot(ember, aes(x = percent_capacity, y = fct_inorder(Country), fill = fct_rev(fct_inorder(Aggregate)))) +\n  geom_col() +\n  scale_x_continuous(labels = scales::percent_format(scale = 1)) +  \n  scale_fill_manual(values = c(\"#6AE2D0\", \"#9DC4D3\",\"#577986\",\"#865C57\",\"#DBCECD\") )+\n  labs(x = \"Capacity (%)\", y = NULL, fill = NULL, \n       title = \"Projected proportion of new fossil gas over all fuels capacity (2022 Ember data)\",\n       subtitle = \"New projected fossil gas capacity from units with construction + planned + shelved status\") +\n  theme_bw()"
  },
  {
    "objectID": "index.html#age-and-timeline-of-capacity",
    "href": "index.html#age-and-timeline-of-capacity",
    "title": "Exploration of gas power plant data",
    "section": "Age and timeline of capacity",
    "text": "Age and timeline of capacity\nExcluding retired and cancelled units\n\n\nCode\nminYear &lt;- min(allData$start_year, na.rm = TRUE)\nmaxYear &lt;- max(allData$planned_retirement_year, na.rm = TRUE)\n\ntimeDt &lt;- allData %&gt;% \n  select(bff_unit_id, Country, status, start_year, retirement_year, planned_retirement_year) %&gt;% \n  filter(!status %in% c('cancelled', 'retired')) %&gt;% \n  mutate(end_yearCat = case_when(!is.na(planned_retirement_year) ~ 'planned',\n                                 TRUE~'unplanned'),\n         end_year = case_when(!is.na(retirement_year) ~ retirement_year,\n                              !is.na(planned_retirement_year) ~ planned_retirement_year,\n                              TRUE~NA),\n         unit_age2024 = 2024-start_year,\n         unit_age2050 = ifelse(is.na(end_year), 2050-start_year, end_year-start_year)) \n\n### How much missing information for year data (in %)\n# timeDt %&gt;% \n#   summarise(across(c(start_year, retirement_year, planned_retirement_year), ~round(sum(is.na(.))/n(),3)))*100\n\nggplot(timeDt, aes(x = end_yearCat)) +\n  geom_bar(aes(fill = fct_infreq(status)), stat = 'count') +\n  geom_text(stat = 'count', aes(label = ..count.., y = ..count..), vjust = -0.2, position = position_stack(vjust = 1)) +\n  theme_bw() +\n  scale_fill_manual(values = colStatus2[-c(7,8)]) + \n  labs(x = \"Retirement status\", y = \"Count of units\", fill = NULL,\n       title = paste0(\"The vast majority of units don't have information of retirement year\\nand there are \",\n                      table(is.na(timeDt$start_year))['TRUE'], \" units without a starting year\"))\n\n\n\n\n\n\n\n\n\n\n\nAge\n\n\nCode\ntimeDt %&gt;%\n  filter(!is.na(unit_age2024), unit_age2024 &gt; 0)  %&gt;% \nggplot(aes(x = start_year)) +\n  geom_histogram(binwidth = 5, color = 'white') +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.01)),\n                       breaks = c(1925, 1945, 1965, 1985, 2005, 2025)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.01))) +\n  labs(title = \"Distribution of starting year\",\n       x = \"Bins of starting year\",\n       y = \"Count of units\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),  \n    panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nCode\ntimeDt %&gt;%\n  filter(!is.na(unit_age2024), unit_age2024 &gt; 0)  %&gt;% \n  ggplot(aes(x = unit_age2024)) +\n  geom_histogram(binwidth = 5, color = 'white') +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.01)),\n                     breaks = seq(0,100,10)\n                     ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.01))) +\n  labs(title = \"Distribution of unit ages\",\n       x = \"Bins of age\",\n       y = \"Count of units\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),  # Remove major gridlines\n        panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\nTimeline of capacity changes\nTake start_year + retirement_year|planned_retirement_year (end_year) to get unit age and then expand the data using unit ID from minimum year to maximum year as many rows as age for each unit. Unsure how to deal with units without starting_year. Using unit adjusted capacity per owner and excluding retired and cancelled units.\n\nOverall capacity changes through time given available information regarding starting and ending years\n\n\nCode\nexpanded_timeDt &lt;- timeDt %&gt;% \n  select( bff_unit_id, Country, status, start_year, end_year, unit_age2050) %&gt;% \n  drop_na(start_year) %&gt;% \n  rowwise() %&gt;% \n  mutate(end_year = if_else(is.na(end_year), start_year + unit_age2050, end_year),\n         yearRow = list(seq(from = start_year, to = min(2050, end_year)))) %&gt;% \n  unnest(yearRow) %&gt;% \n  full_join(select(OwnerDt, bff_unit_id, capacity_adjusted, parent), relationship = \"many-to-many\") %&gt;% ### to account for the units with multiple owners but not sure if good enough\n  filter(!is.na(yearRow), !status %in% c('shelved', 'cancelled')) %&gt;% \n  arrange(yearRow)\n\naggregated_All &lt;- expanded_timeDt %&gt;%\n  group_by(yearRow) %&gt;%\n  summarise(total_capacity = sum(capacity_adjusted)) %&gt;% \n  filter(yearRow &gt; 1950)\n\ny2024 &lt;- aggregated_All %&gt;%\n  filter(yearRow == 2024) %&gt;%\n  summarise(total_capacity = sum(total_capacity)) %&gt;%\n  pull(total_capacity)\n\nggplot(aggregated_All, aes(x = yearRow, y = total_capacity)) +\n  geom_area(fill = NA, color = 'grey30') +\n  geom_vline(aes(xintercept = 2024), linetype = 'dashed' ) +\n annotate(\"text\", x = 2023.5, y = y2024, \n                label = paste('Capacity in 2024:', round(y2024, 0)), \n            hjust = 1, vjust = 0) +\n  theme_classic() +\n  labs(x = NULL, y = \"Capacity (MW)\", \n       title = \"Projected capacity through time given available time information\",\n       subtitle = \"Ignoring status and assuming starting year of planned is correct.\") +\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  scale_y_continuous(labels = label_number_auto())\n\n\n\n\n\n\n\n\n\n\n\n\nCountry-wide capacity changes through time - current Top 10 (2000-2035)\n\n\nCode\naggregated_Country &lt;- expanded_timeDt %&gt;%\n  group_by(yearRow, Country) %&gt;%\n  summarise(total_capacity = sum(capacity_adjusted)) %&gt;% \n  filter(yearRow &gt; 1950) \n\ntop10 &lt;- statusPlant %&gt;%  \n  group_by(Country) %&gt;% \n  summarize(total = sum(capacity_MW_installed, na.rm = T)) %&gt;% \n  arrange(desc(total)) %&gt;% slice(1:10) %&gt;% pull(Country)\n\nfilter(aggregated_Country, Country %in% top10 &\n         yearRow &gt;= 2000 & yearRow &lt;= 2035) %&gt;% \n    mutate(Country = factor(Country, levels = top10)) %&gt;% \n  ggplot(aes(x = yearRow, y = total_capacity, fill = Country)) +\n  geom_area(colour = 'grey30', show.legend = FALSE) +\n  geom_vline(aes(xintercept = 2024), linetype = 'dashed' ) +\n  facet_wrap(~Country, scales = 'fixed', ncol = 4) +\n  scale_fill_manual(values = colorspace::lighten(RColorBrewer::brewer.pal(10, \"Spectral\")[1:10],0.2)) +\n  theme_classic() +\n  labs(x = NULL, y = \"Capacity (MW)\", \n       title = \"Projected capacity through time given available time information for current top 10 countries (2000-2035)\",\n       subtitle = \"Ignoring status and assuming starting year of planned is correct.\") +\n  scale_x_continuous(breaks = scales::pretty_breaks()) +\n  scale_y_continuous(labels = label_number_auto())\n\n\n\n\n\n\n\n\n\n\n\n\nContrast of top 10 countries projections with all other countries\n\n\nCode\n## data for Projected capacity per year - top 10 area \ndttop10 &lt;- aggregated_Country %&gt;% \n  filter(Country %in% top10 &\n           yearRow &gt;= 2000 & yearRow &lt;= 2035) %&gt;% \n  arrange(yearRow, desc(total_capacity)) %&gt;% \n  pivot_wider(names_from = Country, values_from = total_capacity) %&gt;% \n  mutate(Category = 'Per country') %&gt;% \n  ungroup()\n\ndttop10A &lt;- dttop10 %&gt;% \n  pivot_longer(cols = -c(yearRow,Category)) %&gt;% \n  group_by(yearRow) %&gt;% \n  summarize(`Top 10`= sum(value)) %&gt;% \n  left_join(aggregated_All) %&gt;% \n  mutate(Other = total_capacity - `Top 10`,\n         Category = 'Overall') %&gt;% \n  select(-total_capacity) %&gt;% \n  bind_rows(dttop10)\n\n## data for Projected capacity per year - all in grid\ndtGrid &lt;- aggregated_Country %&gt;% \n    filter(yearRow &gt;= 2000 & yearRow &lt;= 2035) %&gt;% \n  rename(country_capacity = total_capacity) %&gt;% \n  left_join(aggregated_All) %&gt;% \n  mutate(Other = total_capacity - country_capacity) %&gt;% \n  filter(Country %in% top10) ### not sure is worth showing the others\n\ndtGrid %&gt;% \n  pivot_longer(cols = c(country_capacity, Other)) %&gt;% \n  arrange(match(Country, top10)) %&gt;% \n  ggplot(aes(x = yearRow, y = value, fill = name)) +\n  geom_area() +\n  geom_vline(aes(xintercept = 2024), linetype = 'dashed' ) +\n  facet_wrap(~fct_inorder(Country), ncol = 4) +\n  #scale_x_continuous(breaks = c(2023,2027,2030)) +\n  scale_y_continuous(labels = label_number_auto()) +\n  labs(fill = NULL, x = NULL, y = \"Capacity\", title = \"Per country projected capacity for top 10 countries in comparison to all other countries\") +\n  scale_fill_manual(values = c(\"black\", alpha(\"grey80\", 0.4))) +\n  theme_classic() +\n  theme(legend.position = 'none')\n\n\n\n\n\n\n\n\n\n\n\n\nCapacity changes through time for current top 10 owners (2000 - 2035)\n\n\nCode\naggregated_Parent &lt;- expanded_timeDt %&gt;%\n  group_by(yearRow, parent) %&gt;%\n  summarise(total_capacity = sum(capacity_adjusted)) %&gt;% \n  filter(yearRow &gt; 1950) \n\ntop10EuropeUti &lt;- filter(cap_utilities, \n                         status %in% c('operating', 'mothballed'))  %&gt;% \n  group_by(parent) %&gt;%\n  summarize(ParentCapacity = sum(capacity_adjusted)) %&gt;% \n  arrange(desc(ParentCapacity)) %&gt;% \n  mutate(EURank = row_number()) %&gt;%\n  filter(EURank &lt;= 10) \n\nfilter(aggregated_Parent, parent %in% top10EuropeUti$parent &\n         yearRow &gt;= 2000 & yearRow &lt;= 2035) %&gt;% \n    mutate(parent = factor(parent, levels = top10EuropeUti$parent)) %&gt;% \n  ggplot(aes(x = yearRow, y = total_capacity, fill = parent)) +\n  geom_area(color = 'grey30', show.legend = FALSE) +\n  geom_vline(aes(xintercept = 2024), linetype = 'dashed' ) +\n  facet_wrap(~parent, scales = 'fixed', ncol = 4) +\n  scale_fill_manual(values = colorspace::lighten(RColorBrewer::brewer.pal(10, \"Spectral\")[1:10],0.2)) +\n  scale_x_continuous(breaks = scales::pretty_breaks()) +\n  scale_y_continuous(labels = label_number_auto()) +\n  theme_classic() +\n  labs(x = NULL, y = \"Capacity (MW)\", \n       title = \"Projected capacity through time given available time information for current top 10 parent companies (2000-2035)\",\n       subtitle = \"Ignoring status and assuming starting year of planned is correct.\")"
  }
]