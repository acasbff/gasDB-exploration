fuelUnits
#| echo: false
library(scales)
library(tidyverse)
library(readxl)
library(here)
library(knitr)
library(kableExtra)
library(openxlsx)
library(hues)
library(DT)
library(patchwork)
library(showtext)
library(ggtext)
library(RSQLite)
library(DBI)
filter = dplyr::filter
count = dplyr::count
mutate = dplyr::mutate
select = dplyr::select
rename = dplyr::rename
recode = dplyr::recode
showtext_auto(TRUE)
font_add("Sans", regular = "/Library/Fonts/OpenSans-Regular.ttf")
theme_set(theme(text = element_text(family="Sans")))
#theme_set(theme_update(text = element_text(family = "Open Sans")))
colStatus <- c("#F79F0F", "#E64795", "#114B63", "#00A1E3", "#8EDFFF", "#3AA26C")
names(colStatus) <- c("Installed", "Planned", "Construction", "Shelved", "Cancelled", "Retired")
colStatus2 <- c("#E64795", "#F2A3CA", "#114B63", "#F79F0F", "#FBCF87", "#00A1E3", "#8EDFFF", "#3AA26C")
names(colStatus2) <- c("announced","pre-construction","construction","operating","mothballed","shelved","cancelled","retired" )
countryMatch0 <- read_delim('/Users/acas/Dropbox/BFF/projects/BFFcountries.txt', show_col_types = FALSE) %>%
rename(country = Iso2)
countryMatch <- select(countryMatch0, country, Country)
### get query tables from Gas database
gasdb <- dbConnect(RSQLite::SQLite(), "/Users/acas/Library/CloudStorage/Box-Box/Internal database folder/4 - Fossil gas DB/1 - Manual and Gas DB/1 - Gas DB/GasDB")
## dbListTables(gasdb)
allData <- dbReadTable(gasdb, "BASE2_units_last_timestamp") %>%
left_join(countryMatch) %>%  # could consider add country from the database
mutate(start_year = ifelse(start_year == 1800, NA, start_year)) ### make 1800 years into missing data...?
OwnerDt0 <- dbReadTable(gasdb, "BASE4_capacity_per_unit_per_parent")
# statusPlant1 <- dbReadTable(gasdb, "BASE7_status_and_capacity_per_plant") %>%       ### slower than R
#   mutate(capacity_MW_installed = ifelse((capacity_MW_operating + capacity_MW_mothballed) == 0, NA, capacity_MW_operating + capacity_MW_mothballed),
#          capacity_MW_planned = ifelse((capacity_MW_announced + capacity_MW_preconstruction) == 0, NA, capacity_MW_announced + capacity_MW_preconstruction))
# download.file('https://ember-climate.org/app/uploads/2022/07/yearly_full_release_long_format.csv', paste0('yearly_full_release_long_format_',
#                      str_remove_all(Sys.Date(), "-"), ".csv"), mode = "wb")
ember0 <- read_csv('../yearly_full_release_long_format_20240830.csv', show_col_types = FALSE) %>%
left_join(select(countryMatch0, `Country code` = Iso3, Country)) %>%
drop_na(Country)
gemFuelData <- suppressWarnings(read_excel('/Users/acas/Dropbox/BFF/projects/GasRelated/dataChecks/DB_comparisons/GOGPT_dl2024-03-29_filteredCountryFossilGas.xlsx')) %>%
select(`Unit ID`, Fuel) %>%
mutate(Fuel_type = ifelse(str_detect(Fuel, fixed(", ")), "multiple","NG")) %>%
rename(gem_unit_id = `Unit ID`)
cleanData <- tibble(allData) %>%
unite("owners", c(owner_1, owner_2, owner_3), remove = TRUE, na.rm = TRUE, sep = "|") %>%
mutate(plant_name = str_remove_all(plant_name_eng, " power station")) %>%
select(Country, plant_name,unit_name,start_year,capacity_mw,status,owners)
cleanData %>%
datatable(
filter = "top",
rownames = FALSE,
extensions = 'Scroller',
options = list(
autoWidth = TRUE,
deferRender = TRUE,
scrollY = 300,
scrollX = TRUE,    # Enable horizontal scrolling
scroller = TRUE,
orderMulti = TRUE,  # Enable multiple column sorting
initComplete = JS(
"function(settings, json) {",
"$('.dataTables_wrapper').css('font-size', '12px');",  # Adjust font size here
"}"
)
),
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: left; font-size: 12px; color: #777; font-style: italic;',
'Note: Hold Shift to sort by multiple columns'
)
)
### making BASE7_status_and_capacity_per_plant table from (faster to load)
capacity_per_status <- allData %>%
group_by(bff_plant_id, year) %>%
summarise(
capacity_MW_operating = round(sum(ifelse(status == 'operating', capacity_mw, 0)), 1),
capacity_MW_announced = round(sum(ifelse(status == 'announced', capacity_mw, 0)), 1),
capacity_MW_preconstruction = round(sum(ifelse(status == 'pre-construction', capacity_mw, 0)), 1),
capacity_MW_construction = round(sum(ifelse(status == 'construction', capacity_mw, 0)), 1),
capacity_MW_retired = round(sum(ifelse(status == 'retired', capacity_mw, 0)), 1),
capacity_MW_mothballed = round(sum(ifelse(status == 'mothballed', capacity_mw, 0)), 1),
capacity_MW_shelved = round(sum(ifelse(status == 'shelved', capacity_mw, 0)), 1),
capacity_MW_cancelled = round(sum(ifelse(status == 'cancelled', capacity_mw, 0)), 1)
) %>%
ungroup()
plant_status <- allData %>%
group_by(bff_plant_id) %>%
summarise(
Status_plant = case_when(
any(status %in% c('operating', 'mothballed')) ~ 'Installed',
any(status == 'construction') ~ 'Construction',
any(status %in% c('announced', 'pre-construction')) ~ 'Planned',
any(status == 'shelved') ~ 'Shelved',
any(status == 'cancelled') ~ 'Cancelled',
all(status == 'retired') ~ 'Retired',
TRUE ~ 'Unknown'
)
) %>%
ungroup()
status_and_date <- plant_status %>%
left_join(allData, by = "bff_plant_id") %>%
group_by(bff_plant_id) %>%
summarise(
Status_plant = first(Status_plant),
retired_year = ifelse(Status_plant == 'Retired',
as.character(max(ifelse(status == 'retired', retirement_year, NA), na.rm = TRUE)),
"[Not relevant]"),
planned_retire_last_unit = case_when(
Status_plant %in% c('Retired', 'Cancelled') ~ NA_character_,
Status_plant %in% c('Installed', 'Construction', 'Planned', 'Shelved') &
any(is.na(planned_retirement_year) & !status %in% c('retired', 'cancelled')) ~ 'Not planned',
TRUE ~ as.character(ifelse(all(is.na(planned_retirement_year)), NA, max(planned_retirement_year, na.rm = TRUE)))
),
start_year_first_unit = case_when(
Status_plant == 'Cancelled' ~ NA_character_,
any(start_year == 1800 | is.na(start_year)) ~ 'Unknown',
TRUE ~ as.character(ifelse(all(is.na(start_year)), NA, min(start_year[start_year > 1800], na.rm = TRUE)))
),
start_year_last_unit = case_when(
Status_plant == 'Cancelled' ~ NA_character_,
any(is.na(start_year)) | !any(start_year > 1800) ~ 'Unknown',
TRUE ~ as.character(ifelse(all(is.na(start_year)), NA, max(start_year[start_year > 1800], na.rm = TRUE)))
),
CHP = case_when(
any(!is.na(chp)) ~ ifelse(max(chp, na.rm = TRUE) == 1, 'Yes', 'No'),
TRUE ~ 'Unknown'
)
) %>%
ungroup()
statusPlant <- allData %>%
left_join(capacity_per_status, by = c("bff_plant_id", "year")) %>%
left_join(status_and_date, by = "bff_plant_id") %>%
group_by(bff_plant_id) %>%
reframe(
Country = first(Country),
Name_English_short = gsub(" power station| power plant", "", first(plant_name_eng)),
Status_plant = first(Status_plant),
start_year_first_unit = first(start_year_first_unit),
capacity_MW_installed = ifelse((capacity_MW_operating + capacity_MW_mothballed) == 0, NA, capacity_MW_operating + capacity_MW_mothballed),
capacity_MW_planned = ifelse((capacity_MW_announced + capacity_MW_preconstruction) == 0, NA, capacity_MW_announced + capacity_MW_preconstruction),
capacity_MW_construction = ifelse(capacity_MW_construction == 0, NA, capacity_MW_construction),
capacity_MW_shelved = ifelse(capacity_MW_shelved == 0, NA, capacity_MW_shelved),
capacity_MW_cancelled = ifelse(capacity_MW_cancelled == 0, NA, capacity_MW_cancelled),
capacity_MW_retired = ifelse(capacity_MW_retired == 0, NA, capacity_MW_retired)
) %>%
ungroup() %>%
arrange(Country, Name_English_short) %>%
distinct()
issues <- select(allData, bff_unit_id , gem_unit_id, status, technology, fuel_main, fuel_secondary) %>%
mutate(Fuel_type_BFF = ifelse(is.na(fuel_secondary), "Fossil gas only", "Multiple fuels")) %>%
inner_join(gemFuelData) %>%
rename( Fuel_GEM = Fuel, Fuel_type_GEM = Fuel_type) %>%
filter(Fuel_type_BFF != Fuel_type_GEM)
## 232 units differ in single vs multiple with GEM so should be checked with most recent GEM update
## write.xlsx(issues, 'fuelIssues_GEM_BFF.xlsx', colWidths = "auto")
fuelUnits <- allData %>%
select(bff_plant_id, capacity_mw, type, fuel_main, fuel_secondary) %>%
mutate(type = ifelse(is.na(type), "Baseload", str_to_sentence(type)),
Fuel_type = ifelse(is.na(fuel_secondary), "Fossil gas only", "Multiple fuels"))
f0c <- ggplot(fuelUnits, aes(x = type, y = capacity_mw)) +
geom_bar(stat = "summary", fun = sum, show.legend = FALSE) +
stat_summary(aes(label = round(stat(y),0)), fun.y = 'sum', geom = 'text', vjust = -0.1, size = 3) +
theme_bw() +
scale_y_continuous(labels = label_number()) +
labs(x = NULL,
y = "Total capacity of power plant units",
caption = "All except peaker are baseload")
f1c <- ggplot(fuelUnits, aes(x = Fuel_type, y = capacity_mw, fill = Fuel_type)) +
geom_bar(stat = "summary", fun = sum, position = 'dodge', show.legend = FALSE ) +
stat_summary(aes(label = round(stat(y),0)), fun.y = 'sum', geom = 'text', vjust = 1.5, size = 3) +
facet_wrap(~type, scale = "free") +
theme_bw() +
scale_y_continuous(labels = label_number()) +
labs(y = "Total capacity of power plant units", x = NULL)
f0cf1c <- (f0c + f1c) +
patchwork::plot_layout(widths = c(0.5, 2), guides = 'collect') +
patchwork::plot_annotation(
title = 'Comparison with capacity')
f0cf1c
f0N <- ggplot(fuelUnits, aes(x = type)) +
geom_bar(show.legend = FALSE ) +
geom_text(stat='count', aes(label=..count..), vjust=-0.1, size = 3) +
theme_bw() +
scale_y_continuous(labels = label_number()) +
labs(x = NULL,
y = "Count of power plant units", caption = 'All except peaker are baseload')
f1N <- ggplot(fuelUnits, aes(x = Fuel_type, fill = Fuel_type)) +
geom_bar(position = 'dodge', show.legend = FALSE ) +
geom_text(stat='count', aes(label=..count..), vjust=1.5, size = 3) +
facet_wrap(~type, scale = "free") +
theme_bw() +
scale_y_continuous(labels = label_number()) +
labs(y = "Count of power plant units", x = NULL)
f0Nf1N <- (f0N + f1N) +
plot_layout(widths = c(0.5, 2), guides = 'collect') +
plot_annotation(
title = "Comparison with number of power plant units")
f0Nf1N
fuelUnits
fuelUnits
head(fuelUnits)
1709+66
